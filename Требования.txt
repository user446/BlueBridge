Требования к прошивке BlueNRG2.

Краткое описание:
Программа слушает/шлёт данные по проводам и в эфире.
Всё, что пришло по проводам, тут же летит в эфир.

Всё, что пришло из эфира, готовится к отправке по spi.

Когда master будет готов слушать, он сообщит об этом, и тогда данные отправляются по spi.

Пошаговое описание:
1. Программа состоит из двух частей, серверной и клиентской (как сейчас). Отличия версий состоят в BLE-части: кто-то к кому-то подключается (клиент к серверу).
2. Между собой два чипа BlueNRG общаются по BLE (как сейчас). Обмен данными производится пачками по 128 символов (как сейчас).
3. С внешним миром чипы общаются по двум интерфейсам:
    - SPI + линия IRQ (чипы являются SPI-slave устройствами);
    - UART (бодовая скорость обмена 115200).
4. Если прилетели данные по UART или SPI:
    - дополнить данные нулями до 128 символов и поместить в очередь для отправки по BLE (queue_ble_tx).
5. Если прилетели данные по BLE:
    - поместить в очередь для отправки SPI и UART (queue_spi_tx и queue_uart_tx)
6. Если в queue_ble_tx есть элементы, то осуществить их отправку (подключение, проверка доступности, notify, etc.)
7. Предусмотреть флаги компиляции (могут принимать значения true/false):
    - SPITX_TRACE - выводится в UART всё, что передаётся в SPI;
    - BLERX_TRACE - выводится в UART всё, что принято по BLE;
    - SPIRX_TRACE - выводится в UART всё, что принято по SPI;
    - BLETX_TRACE - выводится в UART всё, что передаётся по BLE.
8. Если в queue_spi_tx есть элементы, И ПРИ ЭТОМ идёт приём данных по SPI (CS == 0), то ничего не делать.
9. Если в queue_spi_tx есть элементы, И ПРИ ЭТОМ не идёт приём данных по SPI (CS == 1), то выставить GPIO_IRQ = 1.
10. При выставленном GPIO_IRQ = 1 слушать линию MOSI:
    - если по ней пришёл сигнал 0xAA (0b10101010), то начать передачу данных queue_spi_tx, на линии MOSI при этом идут нули.
    - если при этом флаг UART_WITH_SPI_ONLY == true, то передавать данные из queue_uart_tx;
    - если по ней пришёл сигнал 0x99 (0b10011001), то выставить GPIO_IRQ = 0, передача queue_spi_tx не осуществляется, на линии MOSI при этом идут полезные данные, которые надо считывать согласно п. 4.
Формирование сигнала приёма/отклонения (0xAA или 0x99) происходит за отдельный "фрейм" сигнала CS: сигнал CS опускается, передаётся 0xAA, сигнал CS поднимается, далее идёт приём.

Как проверять:
1. Собрать прошивки для сервера и клиента с флагами:
    - #define SPITX_TRACE 1;
    - #define BLERX_TRACE 1;
    - #define SPIRX_TRACE 1;
    - #define BLETX_TRACE 1.
2. Прошить две платы с BlueNRG.
3. Обе платы подключить к терминалам. При этом должна работать двусторонняя связь с учётом дополнения пакета нулями.
